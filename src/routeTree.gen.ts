/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SkillImport } from './routes/skill'
import { Route as MissionImport } from './routes/mission'
import { Route as MarketImport } from './routes/market'
import { Route as InventoryImport } from './routes/inventory'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SkillRoute = SkillImport.update({
  path: '/skill',
  getParentRoute: () => rootRoute,
} as any)

const MissionRoute = MissionImport.update({
  path: '/mission',
  getParentRoute: () => rootRoute,
} as any)

const MarketRoute = MarketImport.update({
  path: '/market',
  getParentRoute: () => rootRoute,
} as any)

const InventoryRoute = InventoryImport.update({
  path: '/inventory',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/inventory': {
      id: '/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof InventoryImport
      parentRoute: typeof rootRoute
    }
    '/market': {
      id: '/market'
      path: '/market'
      fullPath: '/market'
      preLoaderRoute: typeof MarketImport
      parentRoute: typeof rootRoute
    }
    '/mission': {
      id: '/mission'
      path: '/mission'
      fullPath: '/mission'
      preLoaderRoute: typeof MissionImport
      parentRoute: typeof rootRoute
    }
    '/skill': {
      id: '/skill'
      path: '/skill'
      fullPath: '/skill'
      preLoaderRoute: typeof SkillImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/inventory': typeof InventoryRoute
  '/market': typeof MarketRoute
  '/mission': typeof MissionRoute
  '/skill': typeof SkillRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/inventory': typeof InventoryRoute
  '/market': typeof MarketRoute
  '/mission': typeof MissionRoute
  '/skill': typeof SkillRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/inventory': typeof InventoryRoute
  '/market': typeof MarketRoute
  '/mission': typeof MissionRoute
  '/skill': typeof SkillRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/inventory' | '/market' | '/mission' | '/skill'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/inventory' | '/market' | '/mission' | '/skill'
  id: '__root__' | '/' | '/inventory' | '/market' | '/mission' | '/skill'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InventoryRoute: typeof InventoryRoute
  MarketRoute: typeof MarketRoute
  MissionRoute: typeof MissionRoute
  SkillRoute: typeof SkillRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InventoryRoute: InventoryRoute,
  MarketRoute: MarketRoute,
  MissionRoute: MissionRoute,
  SkillRoute: SkillRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/inventory",
        "/market",
        "/mission",
        "/skill"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/inventory": {
      "filePath": "inventory.tsx"
    },
    "/market": {
      "filePath": "market.tsx"
    },
    "/mission": {
      "filePath": "mission.tsx"
    },
    "/skill": {
      "filePath": "skill.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
